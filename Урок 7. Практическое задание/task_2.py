"""
2. Отсортируйте по возрастанию методом слияния одномерный вещественный массив,
заданный случайными числами на промежутке [0; 50). Выведите на экран исходный
и отсортированный массивы.

Хотя в примерах к уроку уже есть вариант реализации слияния,
попробуйте предложить другой (придумать или найти).

И попытаться сделать замеры на массивах разной длины: 10, 100, 1000, ...

Пример:
Введите число элементов: 5
Исходный - [46.11436617832828, 41.62921998361278, 18.45859540989644, 12.128870723745806, 8.025098788570562]
Отсортированный - [8.025098788570562, 12.128870723745806, 18.45859540989644, 41.62921998361278, 46.11436617832828]
"""

from random import triangular
from timeit import default_timer, repeat


def get_usr_lst():
    usr_num = int(input('Введите число элементов: '))
    return [triangular(0, 50) for a in range(int(usr_num))]


def merge(left_lst, right_lst):
    sorted_lst = [0]*(len(left_lst) + len(right_lst))
    i = j = k = 0

    while i < len(left_lst) and j < len(right_lst):
        if left_lst[i] <= right_lst[j]:
            sorted_lst[k] = left_lst[i]
            i += 1
        else:
            sorted_lst[k] = right_lst[j]
            j += 1
        k += 1

    while i < len(left_lst):
        sorted_lst[k] = left_lst[i]
        i += 1
        k += 1

    while j < len(right_lst):
        sorted_lst[k] = right_lst[j]
        j += 1
        k += 1

    return sorted_lst


def merge_sort(lst_obj):
    if len(lst_obj) <= 1:
        return lst_obj

    mid = len(lst_obj) // 2
    left = merge_sort(lst_obj[:mid])
    right = merge_sort(lst_obj[mid:])

    return merge(left, right)


def hoar_sort(lst_obj):
    if len(lst_obj) <= 1:
        return
    barrier = lst_obj[0]
    left = []
    right = []
    medium = []

    for el in lst_obj:
        if el < barrier:
            left.append(el)
        elif el > barrier:
            right.append(el)
        else:
            medium.append(el)

    hoar_sort(left)
    hoar_sort(right)
    j = 0
    for x in left + medium + right:
        lst_obj[j] = x
        j += 1
    return lst_obj


orig_list = get_usr_lst()
print(orig_list)
print(merge_sort(orig_list[:]))
print(hoar_sort(orig_list[:]))


def new_lists():
    orig_list1 = [triangular(0, 50) for a in range(10)]
    orig_list2 = [triangular(0, 50) for a in range(100)]
    orig_list3 = [triangular(0, 50) for a in range(1000)]


    return orig_list1, orig_list2, orig_list3


explore_func = ['merge_sort', 'hoar_sort']

for test_number in range(1, 3):
    print(f'\nТест {test_number}', end='\n')
    explore_lists = new_lists()

    for function in explore_func:
        print(f'- {function}')

        for explore_list in explore_lists:
            time_sec = min(repeat(
                f'{function}({explore_list[:]})', globals=globals(), timer=default_timer, repeat=3, number=1))

            print(f'Время на сортировку списка длиной {len(explore_list)} символов: {time_sec} секунд')
        print('')


"""
Выбраны два типа сортировки: слиянием и Э.Хоара. Сложность у обоих одинаковая, но второй оказался быстрее.

Тест 1
- merge_sort
Время на сортировку списка длиной 10 символов: 2.6199999999754198e-05 секунд
Время на сортировку списка длиной 100 символов: 0.0002743000000000606 секунд
Время на сортировку списка длиной 1000 символов: 0.004123100000000157 секунд

- hoar_sort
Время на сортировку списка длиной 10 символов: 2.260000000031681e-05 секунд
Время на сортировку списка длиной 100 символов: 0.00015360000000086416 секунд
Время на сортировку списка длиной 1000 символов: 0.0023906000000000205 секунд


Тест 2
- merge_sort
Время на сортировку списка длиной 10 символов: 3.770000000002938e-05 секунд
Время на сортировку списка длиной 100 символов: 0.0005869999999994491 секунд
Время на сортировку списка длиной 1000 символов: 0.0038823999999992864 секунд

- hoar_sort
Время на сортировку списка длиной 10 символов: 1.3199999999713441e-05 секунд
Время на сортировку списка длиной 100 символов: 0.0001499999999996504 секунд
Время на сортировку списка длиной 1000 символов: 0.0023143999999994946 секунд

[6.023406931503004, 42.87350984638783, 33.0916338733097, 16.26933501298403, 25.365877826984747, 25.961532604559704, 7.880632776880714, 17.50481987977543, 38.337888302322455, 28.49131550940516, 33.432349770220256, 29.490526721763455, 18.84736541009596, 21.572775590157576, 21.539015060446403, 22.336775830259718, 25.40404676598122, 3.069209453053638, 16.80892609031186, 16.48513436699017, 13.14000902346697, 15.5691718853502, 18.213299978287335, 14.04138139495952, 18.67198858223071, 14.540795833014336, 44.6329015289506, 30.117033539683323, 29.57740115401026, 32.96552651397886, 16.950549519587373, 14.79444692751346, 32.71533073742616, 13.400098651920029, 37.78795737171312, 31.192694437722327, 15.715761051138163, 32.629773606197176, 15.155938001818242, 2.072770211835894, 32.35895552741208, 29.078598686838603, 37.37347170905477, 23.644595674600904, 20.04947207132266, 35.161849656385, 27.115520167435513, 24.16733213649797, 31.223919668828408, 22.35671358870629]
[2.072770211835894, 3.069209453053638, 6.023406931503004, 7.880632776880714, 13.14000902346697, 13.400098651920029, 14.04138139495952, 14.540795833014336, 14.79444692751346, 15.155938001818242, 15.5691718853502, 15.715761051138163, 16.26933501298403, 16.48513436699017, 16.80892609031186, 16.950549519587373, 17.50481987977543, 18.213299978287335, 18.67198858223071, 18.84736541009596, 20.04947207132266, 21.539015060446403, 21.572775590157576, 22.336775830259718, 22.35671358870629, 23.644595674600904, 24.16733213649797, 25.365877826984747, 25.40404676598122, 25.961532604559704, 27.115520167435513, 28.49131550940516, 29.078598686838603, 29.490526721763455, 29.57740115401026, 30.117033539683323, 31.192694437722327, 31.223919668828408, 32.35895552741208, 32.629773606197176, 32.71533073742616, 32.96552651397886, 33.0916338733097, 33.432349770220256, 35.161849656385, 37.37347170905477, 37.78795737171312, 38.337888302322455, 42.87350984638783, 44.6329015289506]
[2.072770211835894, 3.069209453053638, 6.023406931503004, 7.880632776880714, 13.14000902346697, 13.400098651920029, 14.04138139495952, 14.540795833014336, 14.79444692751346, 15.155938001818242, 15.5691718853502, 15.715761051138163, 16.26933501298403, 16.48513436699017, 16.80892609031186, 16.950549519587373, 17.50481987977543, 18.213299978287335, 18.67198858223071, 18.84736541009596, 20.04947207132266, 21.539015060446403, 21.572775590157576, 22.336775830259718, 22.35671358870629, 23.644595674600904, 24.16733213649797, 25.365877826984747, 25.40404676598122, 25.961532604559704, 27.115520167435513, 28.49131550940516, 29.078598686838603, 29.490526721763455, 29.57740115401026, 30.117033539683323, 31.192694437722327, 31.223919668828408, 32.35895552741208, 32.629773606197176, 32.71533073742616, 32.96552651397886, 33.0916338733097, 33.432349770220256, 35.161849656385, 37.37347170905477, 37.78795737171312, 38.337888302322455, 42.87350984638783, 44.6329015289506]

"""