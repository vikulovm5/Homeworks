"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные по длине части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы.

Задачу можно решить без сортировки исходного массива.

Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках: Шелла, Гномья, Кучей...

[5, 3, 4, 3, 3, 3, 3]

[3, 3, 3, 3, 3, 4, 5]

my_lst
new_lts

arr[m]


from statistics import median

[3, 4, 3, 3, 5, 3, 3]

left = []
right = []

left == right and

for i in
    for
    left == right
    left.clear()
    right.clear()


"""

from random import randint
from timeit import timeit

try:
    m = int(input('Введите натуральное число m: '))
except ValueError:
    m = int(input('Введенные данные некорректны. повторите попытку: '))

orig_list = [randint(-100, 100) for a in range(2 * m + 1)]
lst_copy = orig_list[:]
print('Исходный массив:', orig_list)
print('Копия массива:', lst_copy)

print('________________________________')


def my_sort(lst):
    for i in range((len(lst) - 2) // 2, -1, -1):
        clearing(lst, i, len(lst) - 1)

    for i in range(len(lst) - 1, 0, -1):
        lst[i], lst[0] = lst[0], lst[i]
        clearing(lst, 0, i - 1)


def clearing(lst, start, stop):
    root = start
    while 1:
        branch = root * 2 + 1
        if branch > stop:
            break

        if branch + 1 <= stop and lst[branch] < lst[branch + 1]:
            branch += 1

        if lst[root] < lst[branch]:
            lst[root], lst[branch] = lst[branch], lst[root]
            root = branch
        else:
            break


my_sort(lst_copy)

print(f'Отсортированная копия массива: ', lst_copy)
print('Медиана: ', lst_copy[m])


print('________________________________')


def func(lst):
    lst_copy = lst[:]

    while len(lst_copy) > m + 1:
        lst_copy.pop(lst_copy.index(max(lst_copy)))
    return lst_copy


print('Медиана: ', max(func(orig_list)))

print('________________________________')

print('Сортировка:')
print('Список длиной 10 символов:   ', timeit("my_sort(orig_list[:])", globals=globals(), number=10))
print('Список длиной 100 символов:  ', timeit("my_sort(orig_list[:])", globals=globals(), number=100))
print('Список длиной 1000 символов: ', timeit("my_sort(orig_list[:])", globals=globals(), number=1000))

print('Максимумы:')
print('Список длиной 10 символов:   ', timeit("func(orig_list[:])", globals=globals(), number=10))
print('Список длиной 100 символов:  ', timeit("func(orig_list[:])", globals=globals(), number=100))
print('Список длиной 1000 символов: ', timeit("func(orig_list[:])", globals=globals(), number=1000))

'''
Введите натуральное число m: 20
Исходный массив: [24, 100, -11, 11, -74, 56, -51, -18, -100, -98, -92, -52, 67, -4, -97, 34, -49, -91, 72, -21, 98, -73, 89, -92, -30, 81, -77, 85, -41, -3, 21, -33, -51, -67, 8, 98, 48, 12, -39, 24, -52]
Копия массива: [24, 100, -11, 11, -74, 56, -51, -18, -100, -98, -92, -52, 67, -4, -97, 34, -49, -91, 72, -21, 98, -73, 89, -92, -30, 81, -77, 85, -41, -3, 21, -33, -51, -67, 8, 98, 48, 12, -39, 24, -52]
________________________________
Отсортированная копия массива:  [-100, -98, -97, -92, -92, -91, -77, -74, -73, -67, -52, -52, -51, -51, -49, -41, -39, -33, -30, -21, -18, -11, -4, -3, 8, 11, 12, 21, 24, 24, 34, 48, 56, 67, 72, 81, 85, 89, 98, 98, 100]
Медиана:  -18
________________________________
Медиана:  -18
________________________________
Сортировка:
Список длиной 10 символов:    0.0006920999999993072
Список длиной 100 символов:   0.0081888999999995
Список длиной 1000 символов:  0.08822079999999932
Максимумы:
Список длиной 10 символов:    0.0003089000000002784
Список длиной 100 символов:   0.0025143999999999167
Список длиной 1000 символов:  0.023029600000000094

Поиск медианы путем удаления максимумов занимает меньше времени, чем путем сортировки.
'''
